# -*- coding: utf-8 -*-
"""Yolov12n (320&224) Yolov11(320&224).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L_35TT7VfZiQdbz1Pl2gFzt0mRutPyzh
"""

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="dWCy1AgFzzs5smSzZSxE")
project = rf.workspace("thee-msxvq").project("lettuce-qcfff-qfhpd-j6hae")
version = project.version(3)
dataset = version.download("yolov12")

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="dWCy1AgFzzs5smSzZSxE")
project = rf.workspace("thee-msxvq").project("lettuce-qcfff-qfhpd-j6hae")
version = project.version(3)
dataset = version.download("yolov11")

pip install ultralytics

data_yaml_path = f"{dataset.location}/data.yaml"

data_yaml_content = """
train: /content/lettuce-3/train
val: /content/lettuce-3/valid
test: /content/lettuce-3/test
nc: 6
names: ['bacteria', 'Downy_mildew_on_lettuce', 'Healthy', 'Lettuce Mosaic Virus',
'Powdery_mildew_on_lettuce', 'Septoria_Blight_on_lettuce']
"""

with open(data_yaml_path, "w") as f:
    f.write(data_yaml_content.strip())

!yolo task=detect mode=train model=yolo12n.pt data={dataset.location}/data.yaml epochs=50 imgsz=320 plots=True

!yolo task=detect mode=train model=yolo12n.pt data={dataset.location}/data.yaml epochs=50 imgsz=224 plots=True

!yolo task=detect mode=train model=yolo11n.pt data={dataset.location}/data.yaml epochs=50 imgsz=320 plots=True

!yolo task=detect mode=train model=yolo11n.pt data={dataset.location}/data.yaml epochs=50 imgsz=224 plots=True

from IPython.display import Image, display
#Yolov12n (320px)
folder = "/content/runs/detect/train"

# Tampilkan confusion matrix
display(Image(filename=f"{folder}/confusion_matrix.png"))

# Tampilkan precision-recall curve
display(Image(filename=f"{folder}/PR_curve.png"))

# Tampilkan F1 curve
display(Image(filename=f"{folder}/F1_curve.png"))
# Tampilkan result
display(Image(filename=f"{folder}/results.png"))

# Tampilkan P, R, mAP50, mAP50-95, loss (training summary)
import pandas as pd

results_path = f"{folder}/results.csv"
df = pd.read_csv(results_path)
display(df.tail(1))  # menampilkan hasil epoch terakhir

from IPython.display import Image, display

# Yolov12n (224px)
folder = "/content/runs/detect/train2"

# Tampilkan confusion matrix
display(Image(filename=f"{folder}/confusion_matrix.png"))

# Tampilkan precision-recall curve
display(Image(filename=f"{folder}/PR_curve.png"))

# Tampilkan F1 curve
display(Image(filename=f"{folder}/F1_curve.png"))
# Tampilkan result
display(Image(filename=f"{folder}/results.png"))

# Tampilkan P, R, mAP50, mAP50-95, loss (training summary)
import pandas as pd

results_path = f"{folder}/results.csv"
df = pd.read_csv(results_path)
display(df.tail(1))  # menampilkan hasil epoch terakhir

from IPython.display import Image, display

# Yolov11 (320px)
folder = "/content/runs/detect/train3"

# Tampilkan confusion matrix
display(Image(filename=f"{folder}/confusion_matrix.png"))

# Tampilkan precision-recall curve
display(Image(filename=f"{folder}/PR_curve.png"))

# Tampilkan F1 curve
display(Image(filename=f"{folder}/F1_curve.png"))
# Tampilkan result
display(Image(filename=f"{folder}/results.png"))

# Tampilkan P, R, mAP50, mAP50-95, loss (training summary)
import pandas as pd

results_path = f"{folder}/results.csv"
df = pd.read_csv(results_path)
display(df.tail(1))  # menampilkan hasil epoch terakhir

from IPython.display import Image, display

# Yolov11 (224px)
folder = "/content/runs/detect/trai4"

# Tampilkan confusion matrix
display(Image(filename=f"{folder}/confusion_matrix.png"))

# Tampilkan precision-recall curve
display(Image(filename=f"{folder}/PR_curve.png"))

# Tampilkan F1 curve
display(Image(filename=f"{folder}/F1_curve.png"))
# Tampilkan result
display(Image(filename=f"{folder}/results.png"))

# Tampilkan P, R, mAP50, mAP50-95, loss (training summary)
import pandas as pd

results_path = f"{folder}/results.csv"
df = pd.read_csv(results_path)
display(df.tail(1))  # menampilkan hasil epoch terakhir

from ultralytics import YOLO
# Test Load Model for Separate model
# Load model best PT Yolov12n(320)
model = YOLO('/content/runs/detect/train/weights/best.pt')
# Load model best PT Yolov12n(224)
model = YOLO('/content/runs/detect/train2/weights/best.pt')
# Load model best PT Yolov11n(320)
model = YOLO('/content/runs/detect/train3/weights/best.pt')
# Load model best PT Yolov11n(224)
model = YOLO('/content/runs/detect/train4/weights/best.pt')

from ultralytics import YOLO
# Test Load Model for Separate model
# Load model last PT Yolov12n(320)
model = YOLO('/content/runs/detect/train/weights/last.pt')
# Load model last PT Yolov12n(224)
model = YOLO('/content/runs/detect/train2/weights/last.pt')
# Load model last PT Yolov11n(320)
model = YOLO('/content/runs/detect/train3/weights/last.pt')
# Load model last PT Yolov11n(224)
model = YOLO('/content/runs/detect/train4/weights/last.pt')

#test Prediction from load model
results = model.predict(source='/content/164_jpg.rf.777d75b823d7a72ad21b0533ae9e9978.jpg', save=True, conf=0.5)

from IPython.display import Image, display
import os

# Check the Result from folder 'runs/detect/predict'
output_image_path = "/content/runs/detect/predict3/164_jpg.rf.777d75b823d7a72ad21b0533ae9e9978.jpg"
if os.path.exists(output_image_path):
    display(Image(filename=output_image_path))
else:
    print("Image not Found.")

from ultralytics import YOLO

# Load the YOLO11-YOLO12 besto or last model
# You can change the train weight
model = YOLO("/content/runs/detect/train/weights/best.pt")

# Export the model to TFLite format
model.export(format="tflite")  # creates 'yolo11n_float32.tflite'

# Load the exported TFLite model
tflite_model = YOLO("/content/runs/detect/train/weights/best_saved_model/best_float32.tflite")

# Run inference to test the model
results = tflite_model("/content/IMG_20250426_102905.jpg")

# if using onnx  to convert model onnx to tensorflow
!onnx2tf -i /content/runs/detect/train/weights/best.onnx

from ultralytics import YOLO

# Load the YOLO Best or last model
model = YOLO("/content/runs/detect/train/weights/best.pt")

# Export the model to NCNN & OpenVino format
model.export(format="ncnn")
model.export(format="openvino")

import shutil
import os
from google.colab import files

# Define the path to the runs folder
runs_folder_path = "/content/runs/detect/train"  # Ensure this path exists

# Check if the folder exists
if not os.path.exists(runs_folder_path):
    raise FileNotFoundError(f"The folder {runs_folder_path} does not exist. Check the path or training output.")

# Define a clean zip filename (avoid parentheses or special characters)
zip_filename = "yolov12n_50epochs_openvn_ncnn_320.zip"

# Compress the folder
shutil.make_archive(zip_filename.replace('.zip', ''), 'zip', runs_folder_path)

# Download the compressed file
files.download(zip_filename)

# Test Load the exported NCNN model
ncnn_model = YOLO("/content/runs/detect/train/weights/best_ncnn_model")

# Run inference
results = ncnn_model("/content/-_jpg.rf.4dc5bdfc63a21ebb5301b5346c14f204.jpg")

# Test Load the exported OpenVINO model
ov_model = YOLO("/content/runs/detect/train/weights/best_openvino_model")

# Run inference
#results = ov_model("/content/164_jpg.rf.777d75b823d7a72ad21b0533ae9e9978.jpg")
results = ov_model(source='/content/-_jpg.rf.4dc5bdfc63a21ebb5301b5346c14f204.jpg', save=True, conf=0.2)

# Run inference with specified device, available devices: ["intel:gpu", "intel:npu", "intel:cpu"]
#results = ov_model("/content/164_jpg.rf.777d75b823d7a72ad21b0533ae9e9978.jpg", device="intel:gpu")

from IPython.display import Image, display
import os

# Cek hasil pada folder 'runs/detect/predict'
output_image_path = "/content/runs/detect/predict/-_jpg.rf.4dc5bdfc63a21ebb5301b5346c14f204.jpg"
if os.path.exists(output_image_path):
    display(Image(filename=output_image_path))
else:
    print("Gambar hasil deteksi tidak ditemukan.")